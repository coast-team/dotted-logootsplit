/*
    Copyright (C) 2018  Victorien Elvinger

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import { assert, heavyAssert } from "../util/assert"
import { isObject, FromPlain } from "../util/data-validation"
import { hashCodeOf, isU32, u32 } from "../util/number"
import { Anchor } from "./anchor"
import { Pos, BaseOrdering } from "./pos"
import { Concat, ConcatLength } from "./concat"
import { RangeOrdering, U32Range } from "./u32-range"
import { Ordering } from "../util/ordering"
import { DotPos } from "./dot-pos"

/**
 * Possible relation between two blocks.
 *
 * Same semantic as {@link IntervalOrdering }.
 * @example
 * [0, 2] |⊂ 1[_, _]
 */
export const enum BlockOrdering {
    // TODO: add "AfterVirtualBlock" & "BeforeVirtualBlock" (with better names)?
    BEFORE = -7, // <
    PREPENDABLE = -6, // <:
    SPLITTED_BY = -5, // |⊂
    OVERLAPPING_BEFORE = -4, // <∩
    INCLUDED_LEFT_BY = -3, // +⊂
    INCLUDED_MIDDLE_BY = -2, // ⊂
    INCLUDED_RIGHT_BY = -1, // -⊂
    EQUAL = 0, // =
    INCLUDING_LEFT = 1, // ⊃-
    INCLUDING_MIDDLE = 2, // ⊃
    INCLUDING_RIGHT = 3, // ⊃+
    OVERLAPPING_AFTER = 4, // >∩
    SPLITTING = 5, // ⊃|
    APPENDABLE = 6, // :>
    AFTER = 7, // >
}

/**
 * Map IntervalOrdering to BlockOrdering.
 */
const rangeOrderingAsBlockOrdering = {
    [RangeOrdering.BEFORE]: BlockOrdering.BEFORE,
    [RangeOrdering.PREPENDABLE]: BlockOrdering.PREPENDABLE,
    [RangeOrdering.OVERLAPPING_BEFORE]: BlockOrdering.OVERLAPPING_BEFORE,
    [RangeOrdering.INCLUDING_LEFT]: BlockOrdering.INCLUDING_LEFT,
    [RangeOrdering.INCLUDING_MIDDLE]: BlockOrdering.INCLUDING_MIDDLE,
    [RangeOrdering.INCLUDING_RIGHT]: BlockOrdering.INCLUDING_RIGHT,
    [RangeOrdering.EQUAL]: BlockOrdering.EQUAL,
    [RangeOrdering.INCLUDED_LEFT_BY]: BlockOrdering.INCLUDED_LEFT_BY,
    [RangeOrdering.INCLUDED_MIDDLE_BY]: BlockOrdering.INCLUDED_MIDDLE_BY,
    [RangeOrdering.INCLUDED_RIGHT_BY]: BlockOrdering.INCLUDED_RIGHT_BY,
    [RangeOrdering.OVERLAPPING_AFTER]: BlockOrdering.OVERLAPPING_AFTER,
    [RangeOrdering.APPENDABLE]: BlockOrdering.APPENDABLE,
    [RangeOrdering.AFTER]: BlockOrdering.AFTER,
} as const

/**
 * A {@see Block} or a {@see LengthBlock}.
 */
export interface BaseBlockk<P extends Pos<P>> {
    /**
     * First position of the block.
     */
    readonly lowerPos: P

    /**
     * Last position of the block.
     */
    readonly upperPos: () => P

    /**
     * Block length.
     */
    readonly length: u32
}

/**
 * Represent the removal of a segment.
 */
export type LengthBlock<P extends Pos<P>> = Block<P, ConcatLength>

/**
 * Segment of concatenable elements generated by the same author.
 *
 * A segment can be represented as a set of int successive positions
 * (see {@link Pos }) and an attached content.
 */
export class Block<P extends Pos<P>, E extends Concat<E>> {
    /**
     * @param lowerPos First position of the block.
     * @param content Content of the block.
     */
    constructor(readonly lowerPos: P, readonly content: E) {
        assert(() => content.length > 0, "content.length > 0")
        assert(() => lowerPos.hasIntSucc(content.length - 1), "valid positions")
    }

    /**
     * @param posFromPlain
     * @param itemsFromPlain
     * @return function that accepts a value and attempt to build a block.
     *  It returns the built block if it succeeds, or undefined if it fails.
     */
    static fromPlain<P extends Pos<P>, E extends Concat<E>>(
        posFromPlain: FromPlain<P>,
        itemsFromPlain: FromPlain<E>
    ): FromPlain<Block<P, E>> {
        return (x: unknown) => {
            if (isObject<{ lowerPos: unknown; content: unknown }>(x)) {
                const pos = posFromPlain(x.lowerPos)
                const content = itemsFromPlain(x.content)
                if (pos !== undefined && content !== undefined) {
                    return new Block(pos, content)
                }
            }
            return undefined
        }
    }

    // Access
    /**
     * Length of {@link Block#content }
     */
    get length(): u32 {
        return this.content.length
    }

    /**
     * @example
     * b.nthPos(0) == b.lowerPos
     * b.nthPos(b.length - 1) == b.upperPos
     *
     * @param nth 0-based index
     * @return {@link nth } -th position of the block.
     */
    nthPos(nth: u32): P {
        assert(() => isU32(nth), "nth ∈ u32")
        assert(() => nth < this.length, "nth < this.length")
        if (nth === 0) {
            return this.lowerPos
        } else {
            return this.lowerPos.intSucc(nth)
        }
    }

    /**
     * Last position of the block.
     */
    upperPos(): P {
        return this.nthPos(this.length - 1)
    }

    /**
     * @return anchor just before the lower position
     */
    lowerAnchor(): Anchor<P> {
        return this.anchor(0, false)
    }

    /**
     * @param nth 0-based index
     * @param isAfter is the anchor after the `nth` position?
     * @return Anchor relative to the `nth` psoyion of the block.
     */
    anchor(nth: u32, isAfter: boolean): Anchor<P> {
        assert(() => isU32(nth), "nth ∈ u32")
        assert(() => nth < this.length, "nth < this.length")
        return Anchor.from(this.nthPos(nth), isAfter)
    }

    /**
     * @return anchor just after the upper position
     */
    upperAnchor(): Anchor<P> {
        return this.anchor(this.length - 1, true)
    }

    /**
     * Globally unique identifier of the author which generated this block.
     */
    replica<P extends DotPos<P>>(this: BaseBlockk<P>): u32 {
        return this.lowerPos.replica()
    }

    /**
     * When each position of this block were generated.
     */
    seqs<P extends DotPos<P>>(this: BaseBlockk<P>): U32Range {
        return U32Range.fromLength(this.lowerPos.seq(), this.length)
    }

    /**
     * @param other splitting block
     *      {@link other } must split this
     * @return 0-based index where {@link other } splits this block.
     */
    splittingIndex(other: BaseBlockk<P>): u32 {
        heavyAssert(
            () => this.compare(other) === BlockOrdering.SPLITTED_BY,
            "other splits this"
        )

        const [dist] = this.lowerPos.intDistance(other.lowerPos)
        return dist + 1
    }

    /**
     * @return Length block representation of this block.
     */
    toLengthBlock(): LengthBlock<P> {
        const concatLength = new ConcatLength(this.length)
        return new Block(this.lowerPos, concatLength)
    }

    /**
     * Non-cryptographic way to approximate object identity.
     * Do not take the content into account.
     */
    structuralHashCode(): u32 {
        return hashCodeOf([this.lowerPos.hashCode(), this.length])
    }

    // Status
    /**
     * @return Is this block a length block?
     */
    isLengthBlock(): this is LengthBlock<P> {
        return this.content instanceof ConcatLength
    }

    /**
     * @param other
     * @return Are this and {@link other } an intersection?
     */
    hasIntersection(other: BaseBlockk<P>): boolean {
        const cmp = this.compare(other)
        return (
            BlockOrdering.OVERLAPPING_BEFORE <= cmp &&
            cmp <= BlockOrdering.OVERLAPPING_AFTER
        )
    }

    /**
     * @param other
     * @return Has this an appendable segment to {@link other }?
     */
    hasAppendable(other: BaseBlockk<P>): boolean {
        const cmp = this.compare(other)
        return (
            cmp === BlockOrdering.OVERLAPPING_AFTER ||
            cmp === BlockOrdering.INCLUDING_LEFT ||
            cmp === BlockOrdering.INCLUDING_MIDDLE
        )
    }

    /**
     * @param other
     * @return Has this a prependable segment to {@link other }?
     */
    hasPrependable(other: BaseBlockk<P>): boolean {
        const cmp = this.compare(other)
        return (
            cmp === BlockOrdering.OVERLAPPING_BEFORE ||
            cmp === BlockOrdering.INCLUDING_RIGHT ||
            cmp === BlockOrdering.INCLUDING_MIDDLE
        )
    }

    /**
     * @param anchor
     * @return A pair that includes the index of `anchor` in the block and
     *  its order relation.
     *  Ordering.EQUAL means that {@link anchor} is realted to a position
     *  of this block.
     */
    indexFrom(anchor: Anchor<P>): u32 {
        const baseCmp = this.lowerPos.compareBase(anchor.ref)

        if (baseCmp === BaseOrdering.BEFORE) {
            return this.length
        } else if (baseCmp === BaseOrdering.AFTER) {
            return 0
        } else {
            const [dist, order] = this.lowerPos.intDistance(anchor.ref)

            if (order === Ordering.BEFORE) {
                return this.length
            } else if (dist >= this.length) {
                return 0
            } else {
                if (anchor.isAfter) {
                    return dist + 1
                } else {
                    return dist
                }
            }
        }
    }

    /**
     * @example
     * a.compare(b) == Ordering.Before if a < b
     *
     * @param other
     * @return this [Order relation] {@link other}.
     */
    compare(other: BaseBlockk<P>): BlockOrdering {
        const baseCmp = this.lowerPos.compareBase(other.lowerPos)

        if (baseCmp === BaseOrdering.BEFORE) {
            return BlockOrdering.BEFORE // Before meta block
        } else if (baseCmp === BaseOrdering.AFTER) {
            return BlockOrdering.AFTER // After meta block
        } else {
            const [dist, order] = this.lowerPos.intDistance(other.lowerPos)

            if (baseCmp === BaseOrdering.EQUAL) {
                const lower1 = order === Ordering.BEFORE ? 0 : dist
                const thisInterval = U32Range.fromLength(lower1, this.length)

                const lower2 = order === Ordering.BEFORE ? dist : 0
                const otherInterval = U32Range.fromLength(lower2, other.length)

                const intervalCmp = thisInterval.compare(otherInterval)
                return rangeOrderingAsBlockOrdering[intervalCmp]
            } else if (baseCmp === BaseOrdering.PREFIXING) {
                if (order === Ordering.AFTER) {
                    return BlockOrdering.AFTER
                } else if (dist >= this.length - 1) {
                    return BlockOrdering.BEFORE
                } else {
                    return BlockOrdering.SPLITTED_BY
                }
            } else {
                if (order === Ordering.BEFORE) {
                    return BlockOrdering.BEFORE
                } else if (dist >= other.length - 1) {
                    return BlockOrdering.AFTER
                } else {
                    return BlockOrdering.SPLITTING
                }
            }
        }
    }

    // Derivation
    /**
     * @example
     * Block(p, "ab").append(Block(_, "cd")) == Block(p, "abcd")
     *
     * @param other
     *      {@link other } is appendable to this.
     * @return other appended to this.
     */
    append(other: Block<P, E>): Block<P, E> {
        heavyAssert(
            () => other.compare(this) === BlockOrdering.APPENDABLE,
            "other is appendable to this"
        )
        return new Block(this.lowerPos, this.content.concat(other.content))
    }

    /**
     * @example
     * Block(p, "ab").leftSplitAt(1) == Block(p, "a")
     * Block(p, "ab").leftSplitAt(2) == Block(p, "ab")
     *
     * @param index 0-based index
     *      0 < {@link index } <= {@link Block#length }
     * @return Left split.
     */
    leftSplitAt(index: u32): Block<P, E> {
        assert(() => isU32(index), "index ∈ u32")
        assert(
            () => 0 < index && index <= this.length,
            "0 < index <= this.length"
        )
        const leftItems = this.content.slice(0, index)
        return new Block(this.lowerPos, leftItems)
    }

    /**
     * @example
     * Block(p, "ab").rightSplitAt(1) == Block(p+1, "b")
     * Block(p, "ab").rightSplitAt(0) == Block(p, "ab")
     *
     * @param index 0-based index
     *      {@link index } < this.length
     * @return Right split.
     */
    rightSplitAt(index: u32): Block<P, E> {
        assert(() => isU32(index), "index ∈ u32")
        assert(() => index < this.length, "0 <= index < this.length")
        const rightItems = this.content.slice(index, this.length)
        const rightPos = this.nthPos(index)
        return new Block(rightPos, rightItems)
    }

    /**
     * @example
     * b.splitAt(n) == [b.leftSplitAt(n), b.rightSplitAt(n)]
     *
     * @param index 0-based index
     *      0 < {@link index } < {@link Block#length }
     * @return Left and right splits.
     */
    splitAt(index: u32): readonly [Block<P, E>, Block<P, E>] {
        assert(() => isU32(index), "index ∈ u32")
        assert(
            () => 0 < index && index < this.length,
            "0 < index < this.length"
        )
        return [this.leftSplitAt(index), this.rightSplitAt(index)]
    }

    /**
     * @param other splitting block
     *      {@link other } must split this
     * @return Left and right splits.
     */
    splitWith(other: BaseBlockk<P>): readonly [Block<P, E>, Block<P, E>] {
        assert(
            () => this.compare(other) === BlockOrdering.SPLITTED_BY,
            "other splits this"
        )
        return this.splitAt(this.splittingIndex(other))
    }

    /**
     * @param other
     *      this includes or overlaps after {@link other }
     * @return Part of this block which can be append to {@link block }.
     */
    appendable(other: BaseBlockk<P>): Block<P, E> {
        heavyAssert(
            () => this.hasAppendable(other),
            "this has an appendable segment to other"
        )

        const [dist, order] = this.lowerPos.intDistance(other.lowerPos)
        if (order === Ordering.BEFORE) {
            return this.rightSplitAt(other.length + dist)
        } else {
            return this.rightSplitAt(other.length - dist)
        }
    }

    /**
     * @param other
     *      this includes or overlaps before {@link other }
     * @return Part of this block which can be prepend to {@link block }.
     */
    prependable(other: BaseBlockk<P>): Block<P, E> {
        heavyAssert(
            () => this.hasPrependable(other),
            "this has a prependable segment to other"
        )

        const [dist] = this.lowerPos.intDistance(other.lowerPos)
        return this.leftSplitAt(dist)
    }

    /**
     * @param other
     *      this and {@link other } intersect.
     * @return Intersection part between this and {@link other }.
     */
    intersection(other: BaseBlockk<P>): Block<P, E> {
        heavyAssert(() => this.hasIntersection(other), "this intersects other.")

        const [dist, order] = this.lowerPos.intDistance(other.lowerPos)
        if (order === Ordering.BEFORE) {
            const pos = other.lowerPos
            const l = Math.min(this.length - dist, other.length)
            const elements = this.content.slice(dist, dist + l)
            return new Block(pos, elements)
        } else {
            const pos = this.lowerPos
            const l = Math.min(other.length - dist, this.length)
            const elements = this.content.slice(0, l)
            return new Block(pos, elements)
        }
    }
}
